{"version":3,"sources":["multiplication/model.ts","common/checks.ts","common/random.ts","common/layout.tsx","common/text.tsx","style.tsx","layout.tsx","multiplication/view.tsx","multiplication/presenter.tsx","App.tsx","index.tsx"],"names":["QuizStatus","QuizSkipReason","isNil","value","checkNotNil","msg","Error","check","condition","randRange","min","max","Math","floor","random","QuizModel","history","currentQuiz","nextAlarm","timedOutQuizzes","onInput","event","current","answer","parseInt","target","status","presented","startsSolving","solving","updatesSolution","unreachable","onSubmit","commitSolution","preventDefault","this","ask","console","log","genNewQuiz","scheduleTimeout","presentedAt","Date","question","op1","op2","startedAnswering","solved","isCorrect","submittedAnswer","push","resetSkips","scheduleNextAsk","window","clearTimeout","cancelNextAlarm","setTimeout","skipQuiz","timeout","reason","skipped","timeoutQuiz","QUIZ_TIMEOUT_SECONDS","correct","incorrect","quiz","total","correctRatio","incorrectRatio","Stack","props","compoundStyle","display","flexDirection","alignItems","style","children","HorizontalStack","fwdStyle","VerticalStack","HorizontalGap","width","BigText","fontSize","Icon","size","className","icon","Colors","bad","warning","good","info","background","stroke","Layout","justifyContent","height","color","MainView","model","Status","observer","stats","badStyle","backgroundColor","borderRadius","flex","textAlign","paddingRight","goodStyle","paddingLeft","percentageStyle","fontWeight","position","marginLeft","marginRight","bottom","justifyItems","toFixed","React","QuizView","inputStyle","border","outlineWidth","QuestionContainer","autoFocus","type","QuestionDisplay","QuizPresenter","view","makeAutoObservable","startAsking","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cae62e27.chunk.js","sourcesContent":["import * as React from 'react'\n\nimport {check, checkNotNil, isNil, nil, unreachable} from '../common/checks'\nimport {randRange} from '../common/random'\nimport {ChangeEvent} from 'react'\n\nexport interface MulQuestion {\n    op1: number\n    op2: number\n}\n\nexport enum QuizStatus {\n    presented = 'presented',\n    solving = 'solving',\n    solved = 'solved',\n    skipped = 'skipped',\n}\n\nexport interface PresentedQuiz<Q> {\n    status: QuizStatus.presented\n    question: Q\n    presentedAt: Date\n}\n\nexport interface SolvingQuiz<Q, A> {\n    status: QuizStatus.solving\n    question: Q\n    answer: A\n    presentedAt: Date\n    startedAnswering: Date\n}\n\nexport interface SolvedQuiz<Q, A> {\n    status: QuizStatus.solved\n    question: Q\n    answer: A\n    startedAnswering: Date\n    submittedAnswer: Date\n    isCorrect: boolean\n}\n\n\nexport enum QuizSkipReason {\n    timeout = 'timeout',\n    skip = 'skip',\n}\n\nexport interface SkippedQuiz<Q> {\n    status: QuizStatus.skipped\n    reason: QuizSkipReason\n    question: Q\n}\n\nconst MAX_TIMED_OUT_QUIZZES = 100\n\nexport type Quiz<Q, A> = PresentedQuiz<Q> | SolvingQuiz<Q, A> | SolvedQuiz<Q, A> | SkippedQuiz<Q>\n\nexport type FinalizedQuiz<Q, A> = SolvedQuiz<Q, A> | SkippedQuiz<Q>\n\nconst QUIZ_TIMEOUT_SECONDS = 20\n\nexport class QuizModel {\n    public history: FinalizedQuiz<MulQuestion, number>[] = []\n    public currentQuiz: Quiz<MulQuestion, number> | nil = null\n    private nextAlarm?: number\n    private timedOutQuizzes: number = 0\n\n    startAsking() {\n        this.ask()\n    }\n\n    ask(): void {\n        check(\n            isNil(this.currentQuiz) || this.currentQuiz.status !== QuizStatus.solving,\n            \"Already on a quiz\",\n            this.currentQuiz?.status\n        )\n        console.log('asking')\n        this.currentQuiz = this.genNewQuiz()\n        this.scheduleTimeout()\n    }\n\n    private genNewQuiz(): PresentedQuiz<MulQuestion> {\n        return {\n            status: QuizStatus.presented,\n            presentedAt: new Date(),\n            question: {\n                op1: randRange(2, 10),\n                op2: randRange(2, 10),\n            },\n        }\n    }\n\n    public onInput = (event: ChangeEvent<HTMLInputElement>): void => {\n        const current = checkNotNil(this.currentQuiz)\n        const answer = parseInt(event.target.value, 10)\n        switch (current.status) {\n            case QuizStatus.presented:\n                this.startsSolving(current, answer)\n                break\n            case QuizStatus.solving:\n                this.updatesSolution(current, answer)\n                break\n            default:\n                unreachable('Unexpected quiz status', current.status as never)\n        }\n    }\n\n    public onSubmit = (event: React.FormEvent): void => {\n        this.commitSolution(this.currentQuiz as SolvingQuiz<MulQuestion, number>)\n        event.preventDefault()\n    }\n\n    private updatesSolution(current: SolvingQuiz<MulQuestion, number>, answer: number) {\n        current.answer = answer\n    }\n\n    private startsSolving(current: PresentedQuiz<MulQuestion>, answer: number) {\n        console.log('starts solving')\n        this.currentQuiz = {\n            status: QuizStatus.solving,\n            question: current.question,\n            answer,\n            presentedAt: current.presentedAt,\n            startedAnswering: new Date(),\n        }\n    }\n\n    private commitSolution(current: SolvingQuiz<MulQuestion, number>): void {\n        console.log('commits solution')\n        const solved: SolvedQuiz<MulQuestion, number> = {\n            status: QuizStatus.solved,\n            question: current.question,\n            answer: current.answer,\n            isCorrect: this.isCorrect(current.question, current.answer),\n            startedAnswering: current.startedAnswering,\n            submittedAnswer: new Date()\n        }\n        this.history.push(solved)\n        this.currentQuiz = solved\n        this.resetSkips()\n        this.scheduleNextAsk()\n    }\n\n    private isCorrect(question: MulQuestion, answer: number): boolean {\n        return question.op1 * question.op2 === answer\n    }\n\n    private cancelNextAlarm() {\n        if (!isNil(this.nextAlarm)) {\n            window.clearTimeout(this.nextAlarm)\n        }\n    }\n\n    private scheduleNextAsk() {\n        this.cancelNextAlarm()\n        this.nextAlarm = window.setTimeout(() => this.ask(), 2000)\n    }\n\n    private timeoutQuiz() {\n        this.skipQuiz(QuizSkipReason.timeout)\n        if (this.timedOutQuizzes < MAX_TIMED_OUT_QUIZZES) {\n            this.scheduleNextAsk()\n        }\n    }\n\n\n    private skipQuiz(reason: QuizSkipReason) {\n        if (reason === QuizSkipReason.timeout) {\n            this.timedOutQuizzes += 1\n        }\n        const current = checkNotNil(this.currentQuiz)\n        check(current.status === QuizStatus.presented || current.status === QuizStatus.solving,\n            'Invalid quiz status for skipping', current.status)\n        const skipped: SkippedQuiz<MulQuestion> = {\n            status: QuizStatus.skipped,\n            reason,\n            question: current.question\n        }\n        this.history.push(skipped)\n        this.currentQuiz = skipped\n    }\n\n    private resetSkips() {\n        this.timedOutQuizzes = 0\n    }\n\n    private scheduleTimeout() {\n        this.nextAlarm = window.setTimeout(() => this.timeoutQuiz(), QUIZ_TIMEOUT_SECONDS * 1000)\n    }\n\n    stats(): Stats {\n        let correct: number = 0\n        let incorrect: number = 0\n        for (const quiz of this.history) {\n            if (quiz.status === QuizStatus.solved) {\n                if (quiz.isCorrect) {\n                    correct += 1\n                } else {\n                    incorrect += 1\n                }\n            }\n        }\n        const total = correct + incorrect\n        const correctRatio = total === 0 ? 0 : correct / total\n        const incorrectRatio = 1 - correctRatio\n        return {\n            correct, incorrect, correctRatio, incorrectRatio\n        }\n    }\n}\n\n\nexport interface Stats {\n    correct: number,\n    incorrect: number,\n    correctRatio: number,\n    incorrectRatio: number,\n}","export type nil = null | undefined\n\nexport function isNil<T>(value: T | nil): value is nil {\n    return value === null || typeof value === 'undefined'\n}\n\nexport function checkNotNil<T>(value: T | nil, msg: string = 'Unexpected nil'): T {\n    if (isNil(value)) {\n        throw new Error(msg)\n    }\n    return value\n}\n\nexport function check(condition: boolean, msg: string, value?: unknown): condition is true {\n    if (!condition) {\n        if (isNil(value)) {\n            throw new Error(msg)\n        }\n        throw new Error(`${msg}: ${value}`)\n    }\n    return true\n}\n\nexport function unreachable(msg: string, value: never): never {\n    throw new Error(`Unreachable: ${msg}: ${value}`)\n}","export function randRange(min: number, max: number): number {\n    return Math.floor(Math.random() * (max - min) + min)\n}","import * as React from 'react'\n\nexport interface ContainerProps {\n    children: React.ReactNode\n\n}\n\nexport interface StyledContainerProps extends ContainerProps {\n    style?: React.CSSProperties,\n}\n\nexport function Stack(props: StyledContainerProps): JSX.Element {\n    const compoundStyle: React.CSSProperties = {\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'flex-start',\n        ...props.style,\n    }\n    return <div style={compoundStyle}>{props.children}</div>\n}\n\nexport function HorizontalStack(props: StyledContainerProps): JSX.Element {\n    const fwdStyle: React.CSSProperties = {\n        flexDirection: 'row',\n        ...props.style,\n    }\n    return <Stack style={fwdStyle}>{props.children}</Stack>\n}\n\nexport function VerticalStack(props: StyledContainerProps): JSX.Element {\n    const fwdStyle: React.CSSProperties = {\n        flexDirection: 'column',\n        ...props.style,\n    }\n    return <Stack style={fwdStyle}>{props.children}</Stack>\n}\n\nexport function HorizontalGap(props: { width: number, style?: React.CSSProperties }): JSX.Element {\n    const fwdStyle = {\n        width: `${props.width}px`,\n        ...props.style\n    }\n    return <div style={fwdStyle}/>\n}\n\nexport function Stretch(props: {}): JSX.Element {\n    const style = {height: '100%'}\n    return <div style={style}/>\n}","import {StyledContainerProps} from './layout'\n\nexport function BigText(props: StyledContainerProps): JSX.Element {\n    const fwdStyle: React.CSSProperties = {\n        fontSize: '64px',\n        ...props.style\n    }\n    return <div style={fwdStyle}>{props.children}</div>\n}\n\nexport function MediumText(props: StyledContainerProps): JSX.Element {\n    const fwdStyle: React.CSSProperties = {\n        fontSize: '32px',\n        ...props.style\n    }\n    return <div style={fwdStyle}>{props.children}</div>\n}\n\nexport function Label(props: StyledContainerProps): JSX.Element {\n    const fwdStyle: React.CSSProperties = {\n        fontSize: '10px',\n        ...props.style\n    }\n    return <div style={fwdStyle}>{props.children}</div>\n}\n\nexport function Icon(props: { icon: string, size: number }): JSX.Element {\n    const style: React.CSSProperties = {\n        fontSize: `${props.size}px`\n    }\n    return <span className=\"material-icons\" style={style}>{props.icon}</span>\n}","/**\n * pallette generated through https://coolors.co/ef476f-ffd166-06d6a0-118ab2-073b4c\n * light colors are +50 brightness, except for the background\n */\n\nexport const Colors = {\n    primary: {\n        bad: '#ef476f',\n        warning: '#ffd166',\n        good: '#06d6a0',\n        info: '#118ab2',\n        background: '#073b4c',\n        stroke: '#d8f2fb'\n    },\n    light: {\n        bad: '#f7a4b7',\n        warning: '#ffe8b3',\n        good: '#71fbd7',\n        info: '#6ed1f2',\n        background: '#0b5872',\n        stroke: '#1295c0',\n    }\n}\n","import React from 'react'\nimport {ContainerProps, VerticalStack} from './common/layout'\nimport {Colors} from './style'\n\nexport function Layout(props: ContainerProps): JSX.Element {\n    const style: React.CSSProperties = {\n        alignItems: 'center',\n        justifyContent: 'center',\n        height: '100%',\n        background: Colors.primary.background,\n        color: Colors.primary.stroke,\n    }\n    return <VerticalStack style={style}>\n        {props.children}\n    </VerticalStack>\n}","import * as React from 'react'\nimport {MulQuestion, QuizModel, QuizStatus} from './model'\nimport {isNil} from '../common/checks'\nimport {HorizontalGap, HorizontalStack, Stretch, VerticalStack} from '../common/layout'\nimport {BigText, Icon} from '../common/text'\nimport {Colors} from '../style'\nimport {Layout} from '../layout'\nimport {observer} from 'mobx-react'\n\n\nexport function MainView(props: { model: QuizModel }): JSX.Element {\n    return <Layout>\n        <QuizView model={props.model}/>\n        <Status model={props.model}/>\n    </Layout>\n}\n\n@observer\nexport class Status extends React.Component<{ model: QuizModel }> {\n\n    render(): JSX.Element {\n        const model = this.props.model\n        const stats = model.stats()\n        const containerStyle: React.CSSProperties = {\n            position: 'absolute',\n            marginLeft: 'auto',\n            marginRight: 'auto',\n            width: '400px',\n            bottom: '50px',\n            alignItems: 'center',\n            justifyItems: 'center',\n\n        }\n        const badStyle: React.CSSProperties = {\n            backgroundColor: Colors.light.bad,\n            borderRadius: '4px 0 0 4px',\n            flex: `${stats.incorrectRatio} 1 auto`,\n            textAlign: 'right',\n            justifyContent: 'flex-end',\n            alignItems: 'center',\n            paddingRight: '20px',\n            height: '30px',\n            color: Colors.primary.background\n        }\n        const goodStyle: React.CSSProperties = {\n            backgroundColor: Colors.light.good,\n            borderRadius: '0 4px 4px 0',\n            flex: `${stats.correctRatio} 1 auto`,\n            justifyContent: 'flex-start',\n            alignItems: 'center',\n            paddingLeft: '20px',\n            height: '30px',\n            color: Colors.primary.background\n        }\n        const barStyle = {\n            width: '100%',\n        }\n        const percentageStyle: React.CSSProperties = {\n            fontSize: '24px',\n            fontWeight: 700,\n            color: stats.correctRatio > 0.5 ? Colors.light.good : Colors.light.bad,\n        }\n\n        return <VerticalStack style={containerStyle}>\n            <div style={percentageStyle}>{(stats.correctRatio * 100).toFixed(0)}%</div>\n                <HorizontalStack style={barStyle}>\n                <HorizontalStack style={badStyle}>{stats.incorrect}</HorizontalStack>\n                <HorizontalStack style={goodStyle}>{stats.correct}</HorizontalStack>\n            </HorizontalStack>\n        </VerticalStack>\n\n    }\n}\n\nexport interface QuizViewProps {\n    model: QuizModel\n}\n\n@observer\nexport class QuizView extends React.Component<QuizViewProps> {\n    render(): JSX.Element {\n        const inputStyle: React.CSSProperties = {\n            fontSize: '64px',\n            border: 'none',\n            outlineWidth: 0,\n            width: '200px',\n            background: Colors.primary.background,\n            color: Colors.primary.info,\n        }\n        const model = this.props.model\n        const current = model.currentQuiz\n        if (isNil(current)) {\n            return <div>Start!</div>\n        }\n        switch (current.status) {\n            case QuizStatus.solving:\n            case QuizStatus.presented:\n                return <form onSubmit={model.onSubmit}>\n                    <QuestionContainer question={current.question}>\n                        <input autoFocus style={inputStyle} type=\"text\" onInput={model.onInput}/>\n                    </QuestionContainer>\n                </form>\n            case QuizStatus.solved: {\n                const style: React.CSSProperties = {\n                    color: current.isCorrect ? Colors.primary.good : Colors.primary.bad,\n                    width: '200px',\n                    textAlign: 'left',\n                }\n                return <QuestionContainer question={current.question}>\n                    <BigText style={style}> {current.answer}</BigText>\n                </QuestionContainer>\n            }\n            case QuizStatus.skipped: {\n                const style: React.CSSProperties = {\n                    color: Colors.primary.bad,\n                    width: '200px',\n                    textAlign: 'left',\n                }\n                return <QuestionContainer question={current.question}>\n                    <Icon icon=\"alarm\" size={64}/>\n                </QuestionContainer>\n            }\n            default:\n                return <div>don't know what to do</div>\n        }\n    }\n}\n\nexport function QuestionContainer(props: { question: MulQuestion, children: React.ReactNode }): JSX.Element {\n    const answerStyle: React.CSSProperties = {\n        width: '200px',\n        display: 'flex',\n        alignItems: 'stretch',\n    }\n    return <HorizontalStack>\n        <QuestionDisplay question={props.question}/>\n        <HorizontalGap width={20}/>\n        <HorizontalStack style={answerStyle}>\n            {props.children}\n        </HorizontalStack>\n    </HorizontalStack>\n}\n\nexport function QuestionDisplay(props: { question: MulQuestion }): JSX.Element {\n    return <HorizontalStack>\n        <BigText>{props.question.op1}</BigText>\n        <HorizontalGap width={20}/>\n        <BigText>x</BigText>\n        <HorizontalGap width={20}/>\n        <BigText>{props.question.op2}</BigText>\n        <HorizontalGap width={20}/>\n        <BigText> = </BigText>\n    </HorizontalStack>\n}","import * as React from 'react'\nimport {QuizModel} from './model'\nimport {MainView} from './view'\nimport {observer} from 'mobx-react'\nimport {makeAutoObservable} from 'mobx'\n\nexport class QuizPresenter extends React.Component {\n    private model: QuizModel\n    private view: typeof MainView\n\n    constructor(props: {}) {\n        super(props)\n        this.model = makeAutoObservable(new QuizModel())\n        this.view = observer(MainView)\n    }\n\n    componentDidMount() {\n        console.log('mounted!')\n        this.model.startAsking()\n    }\n\n    render() {\n        return React.createElement(this.view, {model: this.model})\n    }\n}","import React from 'react'\nimport {QuizPresenter} from './multiplication/presenter'\n\nfunction App(): JSX.Element {\n    return <QuizPresenter/>\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}